import type { Metadata } from "next";
import { NextIntlClientProvider, hasLocale } from 'next-intl';
import { notFound } from 'next/navigation';
import { routing } from '@/i18n/routing';
import { fontVariables } from "@/utils/fonts";
import "@/styles/globals.css";
import { cn } from "@/lib/utils";
import AppLayout from "@/layouts/app/AppLayout";
import { META_THEME_COLORS } from "@/utils/constants";
import { cookies } from "next/headers";
import { ThemeProvider } from "next-themes";
import { ActiveThemeProvider } from "@/components/layouts/themes/active-theme";
import { Toaster } from "@/components/ui/sonner"
import { getMessages } from "next-intl/server";


export const metadata: Metadata = {
  title: "MeKa Next Kit App",
  description: "Generated by MeKa Next Kit App",
};

export default async function LocaleLayout({
  children,
  params
}: {
  children: React.ReactNode;
  params: { locale: string };
}) {
  const cookieStore = await cookies()
  const activeThemeValue = cookieStore.get("active_theme")?.value
  const isScaled = activeThemeValue?.endsWith("-scaled")

  // Ensure that the incoming `locale` is valid
  const { locale } = await params;
  if (!hasLocale(routing.locales, locale)) {
    notFound();
  }

  const messages = await getMessages();

  return (
    <html lang={locale} suppressHydrationWarning>
      <head>
        <script
          dangerouslySetInnerHTML={{
            __html: `
                    try {
                      if (localStorage.theme === 'dark' || ((!('theme' in localStorage) || localStorage.theme === 'system') && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
                        document.querySelector('meta[name="theme-color"]').setAttribute('content', '${META_THEME_COLORS.dark}')
                      }
                    } catch (_) {}
                  `,
          }}
        />
      </head>
      <body
        className={cn(
          "bg-background overscroll-none font-sans antialiased",
          activeThemeValue ? `theme-${activeThemeValue}` : "",
          isScaled ? "theme-scaled" : "",
          fontVariables
        )}
        suppressHydrationWarning={true}
      >
        <ThemeProvider
          attribute="class"
          defaultTheme="dark"
          enableSystem
          disableTransitionOnChange
        >
          <ActiveThemeProvider initialTheme={activeThemeValue}>
            <NextIntlClientProvider locale={locale} messages={messages}>
              <AppLayout>
                {children}
              </AppLayout>
            </NextIntlClientProvider>
          </ActiveThemeProvider>
        </ThemeProvider>
        <Toaster />
      </body>
    </html>
  );
}